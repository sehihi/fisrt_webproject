{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samsung\\\\Documents\\\\GitHub\\\\fisrt_webproject\\\\create_app\\\\src\\\\components\\\\LeftContainer\\\\Notice\\\\Notice.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport \"./Notice.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notice = () => {\n  _s();\n  // 차트 렌더링을 위한 ref 생성 (세 개의 차트)\n  const chartRef1 = useRef(null); // n1-p1\n  const chartRef2 = useRef(null); // n1-p2\n  const chartRef3 = useRef(null); // n1-p3\n  const chartRef4 = useRef(null); // fault-details\n\n  // 차트 데이터를 받아서 차트를 그리는 함수\n  const fetchDataAndDrawChart = async (url, chartRef, title) => {\n    try {\n      // 서버에서 데이터 가져오기\n      const response = await fetch(url);\n      const data = await response.json();\n\n      // 파이 차트를 그릴 컨텍스트\n      const ctx = chartRef.current.getContext(\"2d\");\n\n      // 어두운 파랑 계열 색상 설정\n      const darkBlueColors = [\"#1565C0\",\n      // 더 밝은 파랑\n      \"#1E88E5\",\n      // 가장 밝은 파랑\n      \"#0B3D91\",\n      // 어두운 파랑\n\n      \"#0D47A1\",\n      // 약간 밝은 파랑\n\n      \"#1976D2\" // 밝은 파랑\n      ];\n\n      // 파이 차트 데이터 설정\n      const chartData = {\n        labels: [\"근원부서 없음\", \"근원부서 존재\"],\n        datasets: [{\n          data: [data.근원부서_존재하지않음, data.근원부서_존재],\n          // 서버에서 받은 데이터\n          backgroundColor: darkBlueColors.slice(0, 2),\n          // 파란색 계열 색상\n          hoverBackgroundColor: darkBlueColors.slice(0, 2)\n        }]\n      };\n\n      // 파이 차트 생성\n      new Chart(ctx, {\n        type: \"pie\",\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: title,\n              // 그래프 상단의 제목\n              font: {\n                size: 18\n              }\n            },\n            legend: {\n              position: \"bottom\" // 레이블을 그래프 아래에 표시\n            }\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"데이터를 가져오는 중 오류 발생: \", error);\n    }\n  };\n  const fetchDataAndDrawBarChart = async (url, chartRef, title) => {\n    try {\n      // 서버에서 데이터 가져오기\n      const response = await fetch(url);\n      const data = await response.json();\n\n      // 바 차트를 그릴 컨텍스트\n      const ctx = chartRef.current.getContext(\"2d\");\n      const Labels = data.map(item => item[\"사유코드설명\"]);\n      const Counts = data.map(item => item.count);\n\n      // 바 차트 데이터 설정\n      const chartData = {\n        labels: Labels,\n        datasets: [{\n          data: Counts,\n          // 서버에서 받은 데이터\n          backgroundColor: [\"#FF9F40\", \"#FF6384\", \"#36A2EB\", \"#4BC0C0\", \"#4BC0FF\"]\n        }]\n      };\n\n      // 바 차트 생성\n      new Chart(ctx, {\n        type: \"bar\",\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: title,\n              // 그래프 상단의 제목\n              font: {\n                size: 18\n              }\n            }\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"데이터를 가져오는 중 오류 발생: \", error);\n    }\n  };\n\n  // useEffect를 사용해 차트를 그리는 로직 실행\n  useEffect(() => {\n    fetchDataAndDrawChart(\"http://localhost:3001/n1-p1\", chartRef1, \"P1 개정도 현황\");\n    fetchDataAndDrawChart(\"http://localhost:3001/n1-p2\", chartRef2, \"P2 개정도 현황\");\n    fetchDataAndDrawChart(\"http://localhost:3001/n1-p3\", chartRef3, \"P3 개정도 현황\");\n    fetchDataAndDrawChart(\"http://localhost:3001/fault-details\", chartRef4, \"용접 불량율 현황\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notice\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef1,\n      style: {\n        width: \"50%\",\n        height: \"50%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef2,\n      style: {\n        width: \"50%\",\n        height: \"50%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef3,\n      style: {\n        width: \"50%\",\n        height: \"50%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef4,\n      style: {\n        width: \"50%\",\n        height: \"50%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(Notice, \"n2GyGVRNbVAtBIUNAvjkMPnJFhw=\");\n_c = Notice;\nexport default Notice;\nvar _c;\n$RefreshReg$(_c, \"Notice\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","Notice","_s","chartRef1","chartRef2","chartRef3","chartRef4","fetchDataAndDrawChart","url","chartRef","title","response","fetch","data","json","ctx","current","getContext","darkBlueColors","chartData","labels","datasets","근원부서_존재하지않음","근원부서_존재","backgroundColor","slice","hoverBackgroundColor","type","options","responsive","plugins","display","text","font","size","legend","position","error","console","fetchDataAndDrawBarChart","Labels","map","item","Counts","count","className","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/samsung/Documents/GitHub/fisrt_webproject/create_app/src/components/LeftContainer/Notice/Notice.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport Chart from \"chart.js/auto\";\r\nimport \"./Notice.css\";\r\n\r\nconst Notice = () => {\r\n  // 차트 렌더링을 위한 ref 생성 (세 개의 차트)\r\n  const chartRef1 = useRef(null); // n1-p1\r\n  const chartRef2 = useRef(null); // n1-p2\r\n  const chartRef3 = useRef(null); // n1-p3\r\n  const chartRef4 = useRef(null); // fault-details\r\n\r\n  // 차트 데이터를 받아서 차트를 그리는 함수\r\n  const fetchDataAndDrawChart = async (url, chartRef, title) => {\r\n    try {\r\n      // 서버에서 데이터 가져오기\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n\r\n      // 파이 차트를 그릴 컨텍스트\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n      // 어두운 파랑 계열 색상 설정\r\n      const darkBlueColors = [\r\n        \"#1565C0\", // 더 밝은 파랑\r\n        \"#1E88E5\", // 가장 밝은 파랑\r\n        \"#0B3D91\", // 어두운 파랑\r\n\r\n        \"#0D47A1\", // 약간 밝은 파랑\r\n\r\n        \"#1976D2\", // 밝은 파랑\r\n      ];\r\n\r\n      // 파이 차트 데이터 설정\r\n      const chartData = {\r\n        labels: [\"근원부서 없음\", \"근원부서 존재\"],\r\n        datasets: [\r\n          {\r\n            data: [data.근원부서_존재하지않음, data.근원부서_존재], // 서버에서 받은 데이터\r\n            backgroundColor: darkBlueColors.slice(0, 2), // 파란색 계열 색상\r\n            hoverBackgroundColor: darkBlueColors.slice(0, 2),\r\n          },\r\n        ],\r\n      };\r\n\r\n      // 파이 차트 생성\r\n      new Chart(ctx, {\r\n        type: \"pie\",\r\n        data: chartData,\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            title: {\r\n              display: true,\r\n              text: title, // 그래프 상단의 제목\r\n              font: {\r\n                size: 18,\r\n              },\r\n            },\r\n            legend: {\r\n              position: \"bottom\", // 레이블을 그래프 아래에 표시\r\n            },\r\n          },\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"데이터를 가져오는 중 오류 발생: \", error);\r\n    }\r\n  };\r\n\r\n  const fetchDataAndDrawBarChart = async (url, chartRef, title) => {\r\n    try {\r\n      // 서버에서 데이터 가져오기\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n\r\n      // 바 차트를 그릴 컨텍스트\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n      const Labels = data.map((item) => item[\"사유코드설명\"]);\r\n      const Counts = data.map((item) => item.count);\r\n\r\n      // 바 차트 데이터 설정\r\n      const chartData = {\r\n        labels: Labels,\r\n        datasets: [\r\n          {\r\n            data: Counts, // 서버에서 받은 데이터\r\n            backgroundColor: [\r\n              \"#FF9F40\",\r\n              \"#FF6384\",\r\n              \"#36A2EB\",\r\n              \"#4BC0C0\",\r\n              \"#4BC0FF\",\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n\r\n      // 바 차트 생성\r\n      new Chart(ctx, {\r\n        type: \"bar\",\r\n        data: chartData,\r\n        options: {\r\n          responsive: true,\r\n          plugins: {\r\n            title: {\r\n              display: true,\r\n              text: title, // 그래프 상단의 제목\r\n              font: {\r\n                size: 18,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"데이터를 가져오는 중 오류 발생: \", error);\r\n    }\r\n  };\r\n\r\n  // useEffect를 사용해 차트를 그리는 로직 실행\r\n  useEffect(() => {\r\n    fetchDataAndDrawChart(\r\n      \"http://localhost:3001/n1-p1\",\r\n      chartRef1,\r\n      \"P1 개정도 현황\"\r\n    );\r\n    fetchDataAndDrawChart(\r\n      \"http://localhost:3001/n1-p2\",\r\n      chartRef2,\r\n      \"P2 개정도 현황\"\r\n    );\r\n    fetchDataAndDrawChart(\r\n      \"http://localhost:3001/n1-p3\",\r\n      chartRef3,\r\n      \"P3 개정도 현황\"\r\n    );\r\n    fetchDataAndDrawChart(\r\n      \"http://localhost:3001/fault-details\",\r\n      chartRef4,\r\n      \"용접 불량율 현황\"\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"notice\">\r\n      {/* 각각의 차트를 그릴 canvas */}\r\n      <canvas\r\n        ref={chartRef1}\r\n        style={{ width: \"50%\", height: \"50%\" }}\r\n      ></canvas>{\" \"}\r\n      {/* P1 차트 */}\r\n      <canvas\r\n        ref={chartRef2}\r\n        style={{ width: \"50%\", height: \"50%\" }}\r\n      ></canvas>{\" \"}\r\n      {/* P2 차트 */}\r\n      <canvas\r\n        ref={chartRef3}\r\n        style={{ width: \"50%\", height: \"50%\" }}\r\n      ></canvas>{\" \"}\r\n      {/* P3 차트 */}\r\n      <canvas\r\n        ref={chartRef4}\r\n        style={{ width: \"50%\", height: \"50%\" }}\r\n      ></canvas>{\" \"}\r\n      {/* 사유코드 차트 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}